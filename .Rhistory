grafico_interactivo
# 12 caras por los meses, color cara dias ... y tamanho cara ruta
ruralUrbano_mas_accidentes<-data %>%
group_by(Rural.o.urbano)%>%
summarise(RUtotal_accidentes = n()) %>%
arrange(desc(RUtotal_accidentes))
# desde 2016 hastas 2022
labels = ruralUrbano_mas_accidentes$Rural.o.urbano
values = ruralUrbano_mas_accidentes$RUtotal_accidentes
fig <- plot_ly(type='pie', labels=labels, values=values,
textinfo='label+percent',
insidetextorientation='radial')
fig <- fig %>% layout(title = 'Accidentes por ruta entre 2016-2022')
fig
#y =mideplan x= canton
#tener canton con mas y menos accidentes
region_canton_mas_accidentes<-data%>%
group_by(Regi√≥n.Mideplan, Cant√≥n)%>%
summarise(RCtotal_accidentes = n(),.groups = "drop")
region_canton_mas_accidentes<-region_canton_mas_accidentes%>%
group_by(Regi√≥n.Mideplan, Cant√≥n)%>%
summarise(max_valor = max(RCtotal_accidentes),.groups = "drop")%>%
arrange(max_valor)
# N√∫mero de colores deseado
n_colores <- 176
# Generar la paleta de colores
paleta_colores <-rainbow_hcl(n_colores) # Ejemplo de colores base
fig <- plot_ly(region_canton_mas_accidentes, x = ~Regi√≥n.Mideplan, y = ~max_valor, marker = list(color=paleta_colores) , type = 'bar',hovertemplate = ~paste("Regi√≥n: ", Regi√≥n.Mideplan, "<br>Cant√≥n: ", Cant√≥n, "<br>Valor: ", max_valor,
"<extra></extra>"))
fig <- fig %>% layout(yaxis = list(title = ''),xaxis=list(title = ''), barmode = 'stack')
fig
anioCTG<-data %>%
group_by(A√±o,Tipo.de.circulaci√≥n,Estado.del.tiempo,Clase.de.accidente) %>%
summarise(NumeroAccidentes=n(),.groups="drop")
anioCTG<-anioCTG%>%
group_by(A√±o,Tipo.de.circulaci√≥n,Estado.del.tiempo,Clase.de.accidente)%>%
summarise(Accidentes = min(NumeroAccidentes),.groups = "drop")%>%
arrange(Accidentes)
anioCTG<-anioCTG%>%
rename(Circulacion = Tipo.de.circulaci√≥n)%>%
rename(Clima = Estado.del.tiempo)%>%
rename(Gravedad = Clase.de.accidente)
anioCTG$A√±o<-substr(anioCTG$A√±o, start = 3, stop = nchar(anioCTG$A√±o))
#elimino el 20 del a√±o para que sea mejor la respresentaci√≥n textual
#o sea en vez de 2016 sale 16
faceInteractivo <- ggplot(anioCTG, aes(x=Circulacion, y=Accidentes, color=Clima, group=Gravedad)) +
geom_point()+
labs(x="Tipo de circulaci√≥n",y="Cantidad accidentes",colour=" Estado del clima")+
scale_y_continuous(limits = c(0, 2600), breaks = c(0, 2600))+
theme(axis.text.x = element_text(angle = -45, hjust = 0),axis.text.y = element_text(angle=12))+
facet_grid(A√±o ~ ., scale = "free_x",space = "free")
ggplotly(faceInteractivo)
data <- read.csv("accidentes_transito_con_victimas_2016_2022.csv", sep = ";")
library(dplyr)
library(ggplot2)
library(plotly)
library(colorspace)
library(treemapify)
#obtenemos los meses, dias y la ruta donde
#mas accidentes hay
meses_dias_RU_mas_accidentes <- data %>%
filter(grepl("^[A-L]\\..*\\s(Enero|Febrero|Marzo|Abril|Mayo|Junio|Julio|Agosto|Setiembre|Octubre|Noviembre|Diciembre)$", Mes)) %>%
filter(grepl("^[1-7]\\.(Domingo|Lunes|Martes|Mi√©rcoles|Jueves|Viernes|S√°bado)$", D√≠a)) %>%
group_by(Mes,D√≠a,Ruta) %>%
summarise(MDtotal_accidentes = n()) %>%
arrange(desc(MDtotal_accidentes))
registros_mas_frecuentes <- meses_dias_RU_mas_accidentes %>%
group_by(Mes) %>%
slice(1)
numero_mes <- seq(1, 12, length.out = nrow(registros_mas_frecuentes))
numero_mes <- as.integer(numero_mes)
registros_mas_frecuentes <- cbind(registros_mas_frecuentes, NumeroMes = numero_mes)
# Crear una columna para el n√∫mero de d√≠a seg√∫n el d√≠a de la semana en registros_mas_frecuentes
registros_mas_frecuentes$ColorDia <-ifelse(registros_mas_frecuentes$D√≠a == "1.Domingo", "blue",
ifelse(registros_mas_frecuentes$D√≠a == "2.Lunes", "red",
ifelse(registros_mas_frecuentes$D√≠a == "3.Martes", "yellow",
ifelse(registros_mas_frecuentes$D√≠a == "4.Mi√©rcoles", "cyan",
ifelse(registros_mas_frecuentes$D√≠a == "5.Jueves", "darkgreen",
ifelse(registros_mas_frecuentes$D√≠a == "6.Viernes", "brown",
ifelse(registros_mas_frecuentes$D√≠a == "7.S√°bado", "black", NA)))))))
registros_mas_frecuentes$idRuta <-ifelse(registros_mas_frecuentes$Ruta == "Cantonal", 1)
registros_mas_frecuentes$Mes <- gsub("[A-L]\\.", "", registros_mas_frecuentes$Mes)
registros_mas_frecuentes$D√≠a <- gsub("[1-7]\\.", "", registros_mas_frecuentes$D√≠a)
grafico_chernoff <- ggplot(registros_mas_frecuentes, aes(x = NumeroMes, y = idRuta,label1 = Mes,label2 = Ruta,label3 = D√≠a)) +
geom_point(size = 9,colour = registros_mas_frecuentes$ColorDia) +
labs(x = "Mes",y = "Ruta") +
geom_text(aes(label = "üëÅÔ∏è üëÅÔ∏è"),vjust = -5, size = 3)+
geom_text(aes(label = "üëÑ"), vjust = 5, size = 2) +
theme_bw()
# Convertimos el gr√°fico ggplot2 en uno interactivo con plotly
grafico_interactivo <- ggplotly(grafico_chernoff,tooltip = c("label1", "label2", "label3"))
# Mostramos el gr√°fico interactivo
grafico_interactivo
# 12 caras por los meses, color cara dias ... y tamanho cara ruta
ruralUrbano_mas_accidentes<-data %>%
group_by(Rural.o.urbano)%>%
summarise(RUtotal_accidentes = n()) %>%
arrange(desc(RUtotal_accidentes))
# desde 2016 hastas 2022
labels = ruralUrbano_mas_accidentes$Rural.o.urbano
values = ruralUrbano_mas_accidentes$RUtotal_accidentes
fig <- plot_ly(type='pie', labels=labels, values=values,
textinfo='label+percent',
insidetextorientation='radial')
fig <- fig %>% layout(title = 'Accidentes por ruta entre 2016-2022')
fig
#y =mideplan x= canton
#tener canton con mas y menos accidentes
region_canton_mas_accidentes<-data%>%
group_by(Regi√≥n.Mideplan, Cant√≥n)%>%
summarise(RCtotal_accidentes = n(),.groups = "drop")
region_canton_mas_accidentes<-region_canton_mas_accidentes%>%
group_by(Regi√≥n.Mideplan, Cant√≥n)%>%
summarise(max_valor = max(RCtotal_accidentes),.groups = "drop")%>%
arrange(max_valor)
# N√∫mero de colores deseado
n_colores <- 176
# Generar la paleta de colores
paleta_colores <-rainbow_hcl(n_colores) # Ejemplo de colores base
fig <- plot_ly(region_canton_mas_accidentes, x = ~Regi√≥n.Mideplan, y = ~max_valor, marker = list(color=paleta_colores) , type = 'bar',hovertemplate = ~paste("Regi√≥n: ", Regi√≥n.Mideplan, "<br>Cant√≥n: ", Cant√≥n, "<br>Valor: ", max_valor,
"<extra></extra>"))
fig <- fig %>% layout(yaxis = list(title = ''),xaxis=list(title = ''), barmode = 'stack')
fig
anioCTG<-data %>%
group_by(A√±o,Tipo.de.circulaci√≥n,Estado.del.tiempo,Clase.de.accidente) %>%
summarise(NumeroAccidentes=n(),.groups="drop")
anioCTG<-anioCTG%>%
group_by(A√±o,Tipo.de.circulaci√≥n,Estado.del.tiempo,Clase.de.accidente)%>%
summarise(Accidentes = min(NumeroAccidentes),.groups = "drop")%>%
arrange(Accidentes)
anioCTG<-anioCTG%>%
rename(Circulacion = Tipo.de.circulaci√≥n)%>%
rename(Clima = Estado.del.tiempo)%>%
rename(Gravedad = Clase.de.accidente)
anioCTG$A√±o<-substr(anioCTG$A√±o, start = 3, stop = nchar(anioCTG$A√±o))
#elimino el 20 del a√±o para que sea mejor la respresentaci√≥n textual
#o sea en vez de 2016 sale 16
faceInteractivo <- ggplot(anioCTG, aes(x=Circulacion, y=Accidentes, color=Clima, group=Gravedad)) +
geom_point()+
labs(x="Tipo de circulaci√≥n",y="Cantidad accidentes",colour=" Estado del clima")+
scale_y_continuous(limits = c(0, 2600), breaks = c(0, 2600))+
theme(axis.text.x = element_text(angle = -45, hjust = 0),axis.text.y = element_text(angle=12))+
facet_grid(A√±o ~ ., scale = "free_x",space = "free")
ggplotly(faceInteractivo)
# Calcular la cantidad de accidentes por a√±o
frecuencia_a√±o <- table(data$A√±o)
# Crear un frame de datos con la frecienca y el a√±o
datos_frecuencia_a√±o <- data.frame(
A√±o = names(frecuencia_a√±o),
Accidentes = as.numeric(frecuencia_a√±o)
)
# Crear el grafico con un punto por cada a√±o
puntos_a√±o <- ggplot(datos_frecuencia_a√±o, aes(x = A√±o, y = Accidentes, color = A√±o)) +
geom_point(size = 5) +
scale_x_discrete(breaks = NULL) +
labs(y = "# de accidentes",
title = "Cantidad de accidentes por a√±o") +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank())
ggplotly(puntos_a√±o)
# Calcular la cantidad de accidentes por rango horario de 6 horas
frecuencia_hora_recodificada <- table(data$Hora.recodificada)
# Crear un frame de datos con la frecienca y el rango horario
datos_frecuencia <- data.frame(
Hora = names(frecuencia_hora_recodificada),
Accidentes = as.numeric(frecuencia_hora_recodificada)
)
lineas_hora <- ggplot(datos_frecuencia, aes(x = Hora, y = Accidentes, group = Accidentes)) +
geom_line(aes(y = Accidentes)) +
labs(x = "Fecha", y = "Frecuencia",
title = "Frecuencia de Categor√≠a a lo Largo del Tiempo")
ggplotly(lineas_hora)
# Calcular la cantidad de accidentes por a√±o
frecuencia_a√±o <- table(data$A√±o)
# Crear un frame de datos con la frecienca y el a√±o
datos_frecuencia_a√±o <- data.frame(
A√±o = names(frecuencia_a√±o),
Accidentes = as.numeric(frecuencia_a√±o)
)
# Crear el grafico con un punto por cada a√±o
puntos_a√±o <- ggplot(datos_frecuencia_a√±o, aes(x = A√±o, y = Accidentes, color = A√±o)) +
geom_point(size = 5) +
geom_line()
scale_x_discrete(breaks = NULL) +
labs(y = "# de accidentes",
title = "Cantidad de accidentes por a√±o") +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank())
# Calcular la cantidad de accidentes por a√±o
frecuencia_a√±o <- table(data$A√±o)
# Crear un frame de datos con la frecienca y el a√±o
datos_frecuencia_a√±o <- data.frame(
A√±o = names(frecuencia_a√±o),
Accidentes = as.numeric(frecuencia_a√±o)
)
# Crear el grafico con un punto por cada a√±o
puntos_a√±o <- ggplot(datos_frecuencia_a√±o, aes(x = A√±o, y = Accidentes, color = A√±o)) +
geom_point(size = 5) +
geom_line() +
scale_x_discrete(breaks = NULL) +
labs(y = "# de accidentes",
title = "Cantidad de accidentes por a√±o") +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank())
ggplotly(puntos_a√±o)
# Calcular la cantidad de accidentes por a√±o
frecuencia_a√±o <- table(data$A√±o)
# Crear un frame de datos con la frecienca y el a√±o
datos_frecuencia_a√±o <- data.frame(
A√±o = names(frecuencia_a√±o),
Accidentes = as.numeric(frecuencia_a√±o)
)
# Crear el grafico con un punto por cada a√±o
puntos_a√±o <- ggplot(datos_frecuencia_a√±o, aes(x = A√±o, y = Accidentes, color = A√±o)) +
geom_point(size = 5) +
geom_line(aes(y = Accidentes)) +
scale_x_discrete(breaks = NULL) +
labs(y = "# de accidentes",
title = "Cantidad de accidentes por a√±o") +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank())
ggplotly(puntos_a√±o)
# Calcular la cantidad de accidentes por rango horario de 6 horas
frecuencia_hora_recodificada <- table(data$Hora.recodificada)
# Crear un frame de datos con la frecienca y el rango horario
datos_frecuencia <- data.frame(
Hora = names(frecuencia_hora_recodificada),
Accidentes = as.numeric(frecuencia_hora_recodificada)
)
lineas_hora <- ggplot(datos, aes(x = categoria, fill = categoria)) +
geom_area() +
labs(x = "Categor√≠a", y = "Frecuencia",
title = "Gr√°fico de √Årea de Frecuencia de Categor√≠a") +
theme_minimal()
# Calcular la cantidad de accidentes por rango horario de 6 horas
frecuencia_hora_recodificada <- table(data$Hora.recodificada)
# Crear un frame de datos con la frecienca y el rango horario
datos_frecuencia <- data.frame(
Hora = names(frecuencia_hora_recodificada),
Accidentes = as.numeric(frecuencia_hora_recodificada)
)
lineas_hora <- ggplot(data, aes(x = Hora.recodificada, fill = categoria)) +
geom_area() +
labs(x = "Categor√≠a", y = "Frecuencia",
title = "Gr√°fico de √Årea de Frecuencia de Categor√≠a") +
theme_minimal()
ggplotly(lineas_hora)
# Calcular la cantidad de accidentes por rango horario de 6 horas
frecuencia_hora_recodificada <- table(data$Hora.recodificada)
# Crear un frame de datos con la frecienca y el rango horario
datos_frecuencia <- data.frame(
Hora = names(frecuencia_hora_recodificada),
Accidentes = as.numeric(frecuencia_hora_recodificada)
)
lineas_hora <- ggplot(data, aes(x = Hora.recodificada, fill = Hora.recodificada)) +
geom_area() +
labs(x = "Categor√≠a", y = "Frecuencia",
title = "Gr√°fico de √Årea de Frecuencia de Categor√≠a") +
theme_minimal()
ggplotly(lineas_hora)
# Calcular la cantidad de accidentes por rango horario de 6 horas
frecuencia_hora_recodificada <- table(data$Hora.recodificada)
# Crear un frame de datos con la frecienca y el rango horario
datos_frecuencia <- data.frame(
Hora = names(frecuencia_hora_recodificada),
Accidentes = as.numeric(frecuencia_hora_recodificada)
)
lineas_hora <- ggplot(datos_frecuencia, aes(x = Hora, fill = Hora)) +
geom_area() +
labs(x = "Categor√≠a", y = "Frecuencia",
title = "Gr√°fico de √Årea de Frecuencia de Categor√≠a") +
theme_minimal()
ggplotly(lineas_hora)
# Calcular la cantidad de accidentes por rango horario de 6 horas
frecuencia_hora_recodificada <- table(data$Hora.recodificada)
# Crear un frame de datos con la frecienca y el rango horario
datos_frecuencia <- data.frame(
Hora = names(frecuencia_hora_recodificada),
Accidentes = as.numeric(frecuencia_hora_recodificada)
)
lineas_hora <- ggplot(datos_frecuencia, aes(x = Hora, fill = Accidentes)) +
geom_area() +
labs(x = "Categor√≠a", y = "Frecuencia",
title = "Gr√°fico de √Årea de Frecuencia de Categor√≠a") +
theme_minimal()
ggplotly(lineas_hora)
# Calcular la cantidad de accidentes por rango horario de 6 horas
frecuencia_hora_recodificada <- table(data$Hora.recodificada)
# Crear un frame de datos con la frecienca y el rango horario
datos_frecuencia <- data.frame(
Hora = names(frecuencia_hora_recodificada),
Accidentes = as.numeric(frecuencia_hora_recodificada)
)
lineas_hora <- ggplot(datos_frecuencia, aes(x = Hora, y = Accidentes)) +
geom_area() +
labs(x = "Categor√≠a", y = "Frecuencia",
title = "Gr√°fico de √Årea de Frecuencia de Categor√≠a") +
theme_minimal()
ggplotly(lineas_hora)
# Calcular la cantidad de accidentes por rango horario de 6 horas
frecuencia_hora_recodificada <- table(data$Hora.recodificada)
# Crear un frame de datos con la frecienca y el rango horario
datos_frecuencia <- data.frame(
Hora = names(frecuencia_hora_recodificada),
Accidentes = as.numeric(frecuencia_hora_recodificada)
)
lineas_hora <- ggplot(datos_frecuencia, aes(x = "", y = Accidentes, fill = Hora)) +
geom_bar(width = 1, stat = "identity") +  # Utilizar stat = "identity" para que tome las frecuencias como est√°n
coord_polar("y", start = 0) +
labs(x = "Categor√≠a", y = "Frecuencia",
title = "Gr√°fico de √Årea de Frecuencia de Categor√≠a") +
theme_minimal()
ggplotly(lineas_hora)
# Calcular la cantidad de accidentes por rango horario de 6 horas
frecuencia_hora_recodificada <- table(data$Hora.recodificada)
# Crear un frame de datos con la frecienca y el rango horario
datos_frecuencia <- data.frame(
Hora = names(frecuencia_hora_recodificada),
Accidentes = as.numeric(frecuencia_hora_recodificada)
)
lineas_hora <- ggplot(datos_frecuencia, aes(x = "", y = Accidentes, fill = Hora)) +
geom_bar(width = 1, stat = "identity") +  # Utilizar stat = "identity" para que tome las frecuencias como est√°n
coord_polar("y", start = 0) +
labs(fill = "Categor√≠a",
title = "Gr√°fico de Pastel de Frecuencia de Categor√≠a") +
theme_minimal()
ggplotly(lineas_hora)
# Calcular la cantidad de accidentes por rango horario de 6 horas
frecuencia_hora_recodificada <- table(data$Hora.recodificada)
# Crear un frame de datos con la frecienca y el rango horario
datos_frecuencia_hora <- as.data.frame(frecuencia_hora_recodificada)
names(datos_frecuencia_hora) <- c("Hora recodificada", "Accidentes")
lineas_hora <- ggplot(datos_frecuencia_hora, aes(x = "", y = Accidentes, fill = Hora)) +
geom_bar(width = 1, stat = "identity") +  # Utilizar stat = "identity" para que tome las frecuencias como est√°n
coord_polar("y", start = 0) +
labs(fill = "Categor√≠a",
title = "Gr√°fico de Pastel de Frecuencia de Categor√≠a") +
theme_minimal()
ggplotly(lineas_hora)
# Calcular la cantidad de accidentes por rango horario de 6 horas
frecuencia_hora_recodificada <- table(data$Hora.recodificada)
# Crear un frame de datos con la frecienca y el rango horario
datos_frecuencia_hora <- as.data.frame(frecuencia_hora_recodificada)
names(datos_frecuencia_hora) <- c("Hora", "Accidentes")
lineas_hora <- ggplot(datos_frecuencia_hora, aes(x = "", y = Accidentes, fill = Hora)) +
geom_bar(width = 1, stat = "identity") +  # Utilizar stat = "identity" para que tome las frecuencias como est√°n
coord_polar("y", start = 0) +
labs(fill = "Categor√≠a",
title = "Gr√°fico de Pastel de Frecuencia de Categor√≠a") +
theme_minimal()
ggplotly(lineas_hora)
# Supongamos que tienes un marco de datos llamado "datos" con una columna llamada "Hora.recodificada" que deseas visualizar en un gr√°fico de pastel
# Calcular la cantidad de accidentes por rango horario de 6 horas
frecuencia_hora_recodificada <- table(data$Hora.recodificada)
# Crear un marco de datos con la frecuencia y el rango horario
datos_frecuencia_hora <- as.data.frame(frecuencia_hora_recodificada)
names(datos_frecuencia_hora) <- c("Hora", "Accidentes")
# Crear el gr√°fico de pastel con ggplot2
p <- ggplot(datos_frecuencia_hora, aes(x = "", y = Accidentes, fill = Hora)) +
geom_bar(width = 1, stat = "identity") +  # Utilizar stat = "identity" para que tome las frecuencias como est√°n
coord_polar("y", start = 0) +  # Convertir el gr√°fico en un gr√°fico de pastel
labs(fill = "Rango Horario",
title = "Gr√°fico de Pastel de Frecuencia de Rango Horario") +
theme_void()  # Eliminar elementos adicionales del tema
# Mostrar el gr√°fico
print(p)
# Supongamos que tienes un marco de datos llamado "datos" con una columna llamada "Hora.recodificada" que deseas visualizar en un gr√°fico de pastel
# Calcular la cantidad de accidentes por rango horario de 6 horas
frecuencia_hora_recodificada <- table(data$Hora.recodificada)
# Crear un marco de datos con la frecuencia y el rango horario
datos_frecuencia_hora <- as.data.frame(frecuencia_hora_recodificada)
names(datos_frecuencia_hora) <- c("Hora", "Accidentes")
# Crear el gr√°fico de pastel con ggplot2
p <- ggplot(datos_frecuencia_hora, aes(x = "", y = Accidentes, fill = Hora)) +
geom_bar(width = 1, stat = "identity") +  # Utilizar stat = "identity" para que tome las frecuencias como est√°n
coord_polar("y", start = 0) +  # Convertir el gr√°fico en un gr√°fico de pastel
labs(fill = "Rango Horario",
title = "Gr√°fico de Pastel de Frecuencia de Rango Horario") +
theme_void()  # Eliminar elementos adicionales del tema
# Mostrar el gr√°fico
ggplotly(p)
# Calcular la cantidad de accidentes por rango horario de 6 horas
frecuencia_hora_recodificada <- table(data$Hora.recodificada)
# Crear un frame de datos con la frecienca y el rango horario
datos_frecuencia <- data.frame(
Hora = names(frecuencia_hora_recodificada),
Accidentes = as.numeric(frecuencia_hora_recodificada)
)
lineas_hora <- ggplot(datos_frecuencia, aes(x = "", y = Accidentes, fill = Hora)) +
geom_bar(width = 1, stat = "identity") +  # Utilizar stat = "identity" para que tome las frecuencias como est√°n
coord_polar("y", start = 0) +
labs(fill = "Categor√≠a",
title = "Gr√°fico de Pastel de Frecuencia de Categor√≠a") +
theme_minimal()
ggplotly(lineas_hora)
# Calcular la cantidad de accidentes por rango horario de 6 horas
frecuencia_hora_recodificada <- table(data$Hora.recodificada)
# Crear un frame de datos con la frecuencia y el rango horario
datos_frecuencia <- data.frame(
Hora = names(frecuencia_hora_recodificada),
Accidentes = as.numeric(frecuencia_hora_recodificada)
)
lineas_hora <- ggplot(data, aes(x = Hora.recodificada)) +
geom_bar() +
labs(title = "Data Science: Count by job category",
x = "Job Category", y = "Count", fill = "work setting") +
theme(axis.text.x = element_text(angle = 315, hjust = 0))
ggplotly(lineas_hora)
# Calcular la cantidad de accidentes por rango horario de 6 horas
frecuencia_hora_recodificada <- table(data$Hora.recodificada)
# Crear un frame de datos con la frecuencia y el rango horario
datos_frecuencia <- data.frame(
Hora = names(frecuencia_hora_recodificada),
Accidentes = as.numeric(frecuencia_hora_recodificada)
)
barras_hora <- ggplot(data, aes(x = Hora.recodificada)) +
geom_bar() +
labs(title = "Data Science: Count by job category",
x = "Job Category", y = "Count", fill = "work setting") +
theme(axis.text.x = element_text(angle = 315, hjust = 0))
ggplotly(barras_hora)
# Calcular la cantidad de accidentes por rango horario de 6 horas
frecuencia_hora_recodificada <- table(data$Hora.recodificada)
# Crear un frame de datos con la frecuencia y el rango horario
datos_frecuencia <- data.frame(
Hora = names(frecuencia_hora_recodificada),
Accidentes = as.numeric(frecuencia_hora_recodificada)
)
barras_hora <- ggplot(data, aes(x = Hora.recodificada, color = Hora.recodificada)) +
geom_bar() +
labs(title = "Data Science: Count by job category",
x = "Job Category", y = "Count", fill = "work setting") +
theme(axis.text.x = element_text(angle = 315, hjust = 0))
ggplotly(barras_hora)
# Calcular la cantidad de accidentes por rango horario de 6 horas
frecuencia_hora_recodificada <- table(data$Hora.recodificada)
# Crear un frame de datos con la frecuencia y el rango horario
datos_frecuencia <- data.frame(
Hora = names(frecuencia_hora_recodificada),
Accidentes = as.numeric(frecuencia_hora_recodificada)
)
barras_hora <- ggplot(data, aes(x = Hora.recodificada, fill = Hora.recodificada)) +
geom_bar() +
labs(title = "Data Science: Count by job category",
x = "Job Category", y = "Count", fill = "work setting") +
theme(axis.text.x = element_text(angle = 315, hjust = 0))
ggplotly(barras_hora)
# Calcular la cantidad de accidentes por rango horario de 6 horas
frecuencia_hora_recodificada <- table(data$Hora.recodificada)
# Crear un frame de datos con la frecuencia y el rango horario
datos_frecuencia <- data.frame(
Hora = names(frecuencia_hora_recodificada),
Accidentes = as.numeric(frecuencia_hora_recodificada)
)
barras_hora <- ggplot(data, aes(x = Hora.recodificada, fill = Hora.recodificada)) +
geom_bar() +
labs(title = "Data Science: Count by job category",
x = "Hora Recodificada", y = "# de accidentes", fill = "Rango horario") +
theme(axis.text.x = element_text(angle = 315, hjust = 0))
ggplotly(barras_hora)
# Calcular la cantidad de accidentes por rango horario de 6 horas
frecuencia_hora_recodificada <- table(data$Hora.recodificada)
# Crear un frame de datos con la frecuencia y el rango horario
datos_frecuencia <- data.frame(
Hora = names(frecuencia_hora_recodificada),
Accidentes = as.numeric(frecuencia_hora_recodificada)
)
barras_hora <- ggplot(data, aes(fill = Hora.recodificada)) +
geom_bar() +
labs(title = "Data Science: Count by job category",
x = "Hora Recodificada", y = "# de accidentes", fill = "Rango horario") +
theme(axis.text.x = element_text(angle = 315, hjust = 0))
ggplotly(barras_hora)
# Calcular la cantidad de accidentes por rango horario de 6 horas
frecuencia_hora_recodificada <- table(data$Hora.recodificada)
# Crear un frame de datos con la frecuencia y el rango horario
datos_frecuencia <- data.frame(
Hora = names(frecuencia_hora_recodificada),
Accidentes = as.numeric(frecuencia_hora_recodificada)
)
barras_hora <- ggplot(data, aes(x = Hora.recodificada, fill = Hora.recodificada)) +
geom_bar() +
labs(title = "Data Science: Count by job category",
x = "Hora Recodificada", y = "# de accidentes", fill = "Rango horario") +
theme(axis.text.x = element_text(angle = 315, hjust = 0))
ggplotly(barras_hora)
# Calcular la cantidad de accidentes por rango horario de 6 horas
frecuencia_hora_recodificada <- table(data$Hora.recodificada)
# Crear un frame de datos con la frecuencia y el rango horario
datos_frecuencia <- data.frame(
Hora = names(frecuencia_hora_recodificada),
Accidentes = as.numeric(frecuencia_hora_recodificada)
)
barras_hora <- ggplot(data, aes(x = Hora.recodificada, fill = Hora.recodificada)) +
geom_bar() +
labs(title = "Data Science: Count by job category",
x = "Hora Recodificada", y = "# de accidentes", fill = "Rango horario") +
theme(axis.text.x = element_blank())
ggplotly(barras_hora)
# Calcular la cantidad de accidentes por rango horario de 6 horas
frecuencia_hora_recodificada <- table(data$Hora.recodificada)
# Crear un frame de datos con la frecuencia y el rango horario
datos_frecuencia <- data.frame(
Hora = names(frecuencia_hora_recodificada),
Accidentes = as.numeric(frecuencia_hora_recodificada)
)
barras_hora <- ggplot(data, aes(x = Hora.recodificada, fill = Hora.recodificada)) +
geom_bar() +
labs(title = "Accidentes por Hora recodificada (rango de 6 horas)",
x = "Hora Recodificada", y = "# de accidentes", fill = "Rango horario") +
theme(axis.text.x = element_blank())
ggplotly(barras_hora)
