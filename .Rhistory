theme_bw()
# Convertimos el gráfico ggplot2 en uno interactivo con plotly
grafico_interactivo <- ggplotly(grafico_chernoff,tooltip = c("label1", "label2", "label3"))
# Mostramos el gráfico interactivo
grafico_interactivo
# 12 caras por los meses, color cara dias ... y tamanho cara ruta
ruralUrbano_mas_accidentes<-data %>%
group_by(Rural.o.urbano)%>%
summarise(RUtotal_accidentes = n()) %>%
arrange(desc(RUtotal_accidentes))
# desde 2016 hastas 2022
labels = ruralUrbano_mas_accidentes$Rural.o.urbano
values = ruralUrbano_mas_accidentes$RUtotal_accidentes
fig <- plot_ly(type='pie', labels=labels, values=values,
textinfo='label+percent',
insidetextorientation='radial')
fig <- fig %>% layout(title = 'Accidentes por ruta entre 2016-2022')
fig
#y =mideplan x= canton
#tener canton con mas y menos accidentes
region_canton_mas_accidentes<-data%>%
group_by(Región.Mideplan, Cantón)%>%
summarise(RCtotal_accidentes = n(),.groups = "drop")
region_canton_mas_accidentes<-region_canton_mas_accidentes%>%
group_by(Región.Mideplan, Cantón)%>%
summarise(max_valor = max(RCtotal_accidentes),.groups = "drop")%>%
arrange(max_valor)
# Número de colores deseado
n_colores <- 176
# Generar la paleta de colores
paleta_colores <-rainbow_hcl(n_colores) # Ejemplo de colores base
fig <- plot_ly(region_canton_mas_accidentes, x = ~Región.Mideplan, y = ~max_valor, marker = list(color=paleta_colores) , type = 'bar',hovertemplate = ~paste("Región: ", Región.Mideplan, "<br>Cantón: ", Cantón, "<br>Valor: ", max_valor,
"<extra></extra>"))
fig <- fig %>% layout(yaxis = list(title = ''),xaxis=list(title = ''), barmode = 'stack')
fig
anioCTG<-data %>%
group_by(Año,Tipo.de.circulación,Estado.del.tiempo,Clase.de.accidente) %>%
summarise(NumeroAccidentes=n(),.groups="drop")
anioCTG<-anioCTG%>%
group_by(Año,Tipo.de.circulación,Estado.del.tiempo,Clase.de.accidente)%>%
summarise(Accidentes = min(NumeroAccidentes),.groups = "drop")%>%
arrange(Accidentes)
anioCTG<-anioCTG%>%
rename(Circulacion = Tipo.de.circulación)%>%
rename(Clima = Estado.del.tiempo)%>%
rename(Gravedad = Clase.de.accidente)
anioCTG$Año<-substr(anioCTG$Año, start = 3, stop = nchar(anioCTG$Año))
#elimino el 20 del año para que sea mejor la respresentación textual
#o sea en vez de 2016 sale 16
faceInteractivo <- ggplot(anioCTG, aes(x=Circulacion, y=Accidentes, color=Clima, group=Gravedad)) +
geom_point()+
labs(x="Tipo de circulación",y="Cantidad accidentes",colour=" Estado del clima")+
scale_y_continuous(limits = c(0, 2600), breaks = c(0, 2600))+
theme(axis.text.x = element_text(angle = -45, hjust = 0),axis.text.y = element_text(angle=12))+
facet_grid(Año ~ ., scale = "free_x",space = "free")
ggplotly(faceInteractivo)
# Calcular la cantidad de accidentes por año
frecuencia_año <- table(data$Año)
# Crear un frame de datos con la frecienca y el año
datos_frecuencia_año <- data.frame(
Año = names(frecuencia_año),
Accidentes = as.numeric(frecuencia_año)
)
# Crear el grafico con un punto por cada año
puntos_año <- ggplot(datos_frecuencia_año, aes(x = Año, y = Accidentes, color = Año)) +
geom_point(size = 5) +
scale_x_discrete(breaks = NULL) +
labs(y = "# de accidentes",
title = "Cantidad de accidentes por año") +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank())
ggplotly(puntos_año)
# Calcular la cantidad de accidentes por rango horario de 6 horas
frecuencia_hora_recodificada <- table(data$Hora.recodificada)
# Crear un frame de datos con la frecuencia y el rango horario
datos_frecuencia <- data.frame(
Hora = names(frecuencia_hora_recodificada),
Accidentes = as.numeric(frecuencia_hora_recodificada)
)
barras_hora <- ggplot(data, aes(x = Hora.recodificada, fill = Hora.recodificada)) +
geom_bar() +
labs(title = "Accidentes por Hora recodificada (rango de 6 horas)",
x = "Hora Recodificada", y = "# de accidentes", fill = "Rango horario") +
theme(axis.text.x = element_blank())
ggplotly(barras_hora)
barras_clase_tipo <- ggplot(data, aes(x = Tipo.de.accidente, fill = Clase.de.accidente)) +
geom_bar() +  # Barras agrupadas
labs(x = "Categoría", y = "Valor",
title = "Gráfico de Barras Agrupadas")
barras_clase_tipo <- ggplot(data, aes(x = Tipo.de.accidente, fill = Clase.de.accidente)) +
geom_bar() +
labs(x = "Categoría", y = "Valor",
title = "Gráfico de Barras Agrupadas")
plotly(barras_clase_tipo)
barras_clase_tipo <- ggplot(data, aes(x = Tipo.de.accidente, fill = Clase.de.accidente)) +
geom_bar() +
labs(x = "Categoría", y = "Valor",
title = "Gráfico de Barras Agrupadas")
ggplotly(barras_clase_tipo)
barras_clase_tipo <- ggplot(data, aes(x = Tipo.de.accidente, fill = Clase.de.accidente)) +
geom_bar() +
labs(x = "Tipo de accidente", y = "# de accidentes",
title = "Clasificacion de los heridos por tipo de accidente")
ggplotly(barras_clase_tipo)
barras_clase_tipo <- ggplot(data, aes(x = Tipo.de.accidente, fill = Clase.de.accidente)) +
geom_bar() +
labs(x = "Tipo de accidente", y = "# de accidentes",
title = "Clasificacion de los heridos por tipo de accidente")
ggplotly(barras_clase_tipo)
barras_clase_tipo <- ggplot(data, aes(x = Tipo.de.accidente, fill = Clase.de.accidente)) +
geom_bar() +
labs(x = "Tipo de accidente", y = "# de accidentes",
title = "Clasificacion de los heridos por tipo de accidente", fill = "work setting") +
theme(axis.text.x = element_text(angle = 315, hjust = 0))
ggplotly(barras_clase_tipo)
barras_clase_tipo <- ggplot(data, aes(x = Tipo.de.accidente, fill = Clase.de.accidente)) +
geom_bar() +
labs(x = "Tipo de accidente", y = "# de accidentes",
title = "Clasificacion de los heridos por tipo de accidente", fill = "Tipo de heridos") +
theme(axis.text.x = element_text(angle = 315, hjust = 0))
ggplotly(barras_clase_tipo)
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point()
ggplot(mpg, aes(displ, hwy)) +
geom_point()
ggplot(mpg, aes(cty, hwy)) + geom_point()
ggplot(diamonds, aes(carat, price)) + geom_point()
ggplot(diamonds, aes(carat, price)) + geom_point()
ggplot(economics, aes(date, unemploy)) + geom_line()
ggplot(mpg, aes(cty)) + geom_histogram()
ggplot(mpg, aes(displ, hwy, colour = class)) + geom_point()
ggplot(mpg, aes(displ, hwy, shape = drv)) + geom_point()
ggplot(mpg, aes(displ, hwy, size = cyl)) + geom_point()
ggplot(mpg, aes(displ, hwy)) + geom_point(aes(colour = "blue"))
ggplot(mpg, aes(displ, hwy)) + geom_point(colour = "blue")
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
facet_wrap(~class)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_smooth()
#> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_smooth(span = 0.2)
#> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_smooth(span = 1)
#> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'
library(mgcv)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_smooth(method = "gam", formula = y ~ s(x))
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_smooth(method = "lm")
#> `geom_smooth()` using formula = 'y ~ x'
ggplot(mpg, aes(drv, hwy)) +
geom_point()
ggplot(mpg, aes(drv, hwy)) + geom_jitter(shape = "square")
ggplot(mpg, aes(drv, hwy)) + geom_boxplot(colour = "cyan", fill = "lightblue")
ggplot(mpg, aes(drv, hwy)) + geom_violin(colour = "red", fill = "blue")
ggplot(mpg, aes(hwy)) + geom_histogram()
#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
ggplot(mpg, aes(hwy)) + geom_freqpoly()
#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
ggplot(mpg, aes(hwy)) +
geom_freqpoly(binwidth = 2.5)
ggplot(mpg, aes(hwy)) +
geom_freqpoly(binwidth = 1)
ggplot(mpg, aes(displ, colour = drv)) +
geom_freqpoly(binwidth = 0.5)
ggplot(mpg, aes(displ, fill = drv)) +
geom_histogram(binwidth = 0.5) +
facet_wrap(~drv, ncol = 1)
ggplot(mpg, aes(manufacturer)) +
geom_bar()
drugs <- data.frame(
drug = c("a", "b", "c"),
effect = c(4.2, 9.7, 6.1)
)
ggplot(drugs, aes(drug, effect)) + geom_bar(stat = "identity")
ggplot(drugs, aes(drug, effect)) + geom_point()
ggplot(economics, aes(date, unemploy / pop)) +
geom_line()
ggplot(economics, aes(date, uempmed)) +
geom_line()
ggplot(economics, aes(unemploy / pop, uempmed)) +
geom_path() +
geom_point()
year <- function(x) as.POSIXlt(x)$year + 1900
ggplot(economics, aes(unemploy / pop, uempmed)) +
geom_path(colour = "grey50") +
geom_point(aes(colour = year(date)))
ggplot(mpg, aes(cty, hwy)) + geom_point()
ggplot(mpg, aes(cty, hwy)) +
geom_point(alpha = 1 / 3)
ggplot(mpg, aes(cty, hwy)) +
geom_point(alpha = 1 / 3) +
xlab("city driving (mpg)") +
ylab("highway driving (mpg)")
# Remove the axis labels with NULL
ggplot(mpg, aes(cty, hwy)) +
geom_point(alpha = 1 / 3) +
xlab(NULL) +
ylab(NULL)
ggplot(mpg, aes(drv, hwy)) +
geom_jitter(width = 0.25)
ggplot(mpg, aes(drv, hwy)) +
geom_jitter(width = 0.25) +
xlim("f", "r") +
ylim(20, 30)
#> Warning: Removed 138 rows containing missing values (`geom_point()`).
# For continuous scales, use NA to set only one limit
ggplot(mpg, aes(drv, hwy)) +
geom_jitter(width = 0.25, na.rm = TRUE) +
ylim(NA, 30)
p <- ggplot(mpg, aes(displ, hwy, colour = factor(cyl))) +
geom_point()
print(p)
# Save png to disk
ggsave("plot.png", p, width = 5, height = 5)
summary(p)
p + theme_gray()
data <- read.csv("accidentes_transito_con_victimas_2016_2022.csv", sep = ";")
data <- read.csv("accidentes_transito_con_victimas_2016_2022.csv", sep = ";")
library(dplyr)
library(ggplot2)
library(plotly)
library(colorspace)
library(treemapify)
#obtenemos los meses, dias y la ruta donde
#mas accidentes hay
meses_dias_RU_mas_accidentes <- data %>%
filter(grepl("^[A-L]\\..*\\s(Enero|Febrero|Marzo|Abril|Mayo|Junio|Julio|Agosto|Setiembre|Octubre|Noviembre|Diciembre)$", Mes)) %>%
filter(grepl("^[1-7]\\.(Domingo|Lunes|Martes|Miércoles|Jueves|Viernes|Sábado)$", Día)) %>%
group_by(Mes,Día,Ruta) %>%
summarise(MDtotal_accidentes = n()) %>%
arrange(desc(MDtotal_accidentes))
registros_mas_frecuentes <- meses_dias_RU_mas_accidentes %>%
group_by(Mes) %>%
slice(1)
numero_mes <- seq(1, 12, length.out = nrow(registros_mas_frecuentes))
numero_mes <- as.integer(numero_mes)
registros_mas_frecuentes <- cbind(registros_mas_frecuentes, NumeroMes = numero_mes)
# Crear una columna para el número de día según el día de la semana en registros_mas_frecuentes
registros_mas_frecuentes$ColorDia <-ifelse(registros_mas_frecuentes$Día == "1.Domingo", "blue",
ifelse(registros_mas_frecuentes$Día == "2.Lunes", "red",
ifelse(registros_mas_frecuentes$Día == "3.Martes", "yellow",
ifelse(registros_mas_frecuentes$Día == "4.Miércoles", "cyan",
ifelse(registros_mas_frecuentes$Día == "5.Jueves", "darkgreen",
ifelse(registros_mas_frecuentes$Día == "6.Viernes", "brown",
ifelse(registros_mas_frecuentes$Día == "7.Sábado", "black", NA)))))))
registros_mas_frecuentes$idRuta <-ifelse(registros_mas_frecuentes$Ruta == "Cantonal", 1)
registros_mas_frecuentes$Mes <- gsub("[A-L]\\.", "", registros_mas_frecuentes$Mes)
registros_mas_frecuentes$Día <- gsub("[1-7]\\.", "", registros_mas_frecuentes$Día)
grafico_chernoff <- ggplot(registros_mas_frecuentes, aes(x = NumeroMes, y = idRuta,label1 = Mes,label2 = Ruta,label3 = Día)) +
geom_point(size = 9,colour = registros_mas_frecuentes$ColorDia) +
labs(x = "Mes",y = "Ruta") +
geom_text(aes(label = "👁️ 👁️"),vjust = -5, size = 3)+
geom_text(aes(label = "👄"), vjust = 5, size = 2) +
theme_bw()
# Convertimos el gráfico ggplot2 en uno interactivo con plotly
grafico_interactivo <- ggplotly(grafico_chernoff,tooltip = c("label1", "label2", "label3"))
# Mostramos el gráfico interactivo
grafico_interactivo
# 12 caras por los meses, color cara dias ... y tamanho cara ruta
ruralUrbano_mas_accidentes<-data %>%
group_by(Rural.o.urbano)%>%
summarise(RUtotal_accidentes = n()) %>%
arrange(desc(RUtotal_accidentes))
# desde 2016 hastas 2022
labels = ruralUrbano_mas_accidentes$Rural.o.urbano
values = ruralUrbano_mas_accidentes$RUtotal_accidentes
fig <- plot_ly(type='pie', labels=labels, values=values,
textinfo='label+percent',
insidetextorientation='radial')
fig <- fig %>% layout(title = 'Accidentes por ruta entre 2016-2022')
fig
#y =mideplan x= canton
#tener canton con mas y menos accidentes
region_canton_mas_accidentes<-data%>%
group_by(Región.Mideplan, Cantón)%>%
summarise(RCtotal_accidentes = n(),.groups = "drop")
region_canton_mas_accidentes<-region_canton_mas_accidentes%>%
group_by(Región.Mideplan, Cantón)%>%
summarise(max_valor = max(RCtotal_accidentes),.groups = "drop")%>%
arrange(max_valor)
# Número de colores deseado
n_colores <- 176
# Generar la paleta de colores
paleta_colores <-rainbow_hcl(n_colores) # Ejemplo de colores base
fig <- plot_ly(region_canton_mas_accidentes, x = ~Región.Mideplan, y = ~max_valor, marker = list(color=paleta_colores) , type = 'bar',hovertemplate = ~paste("Región: ", Región.Mideplan, "<br>Cantón: ", Cantón, "<br>Valor: ", max_valor,
"<extra></extra>"))
fig <- fig %>% layout(yaxis = list(title = ''),xaxis=list(title = ''), barmode = 'stack')
fig
anioCTG<-data %>%
group_by(Año,Tipo.de.circulación,Estado.del.tiempo,Clase.de.accidente) %>%
summarise(NumeroAccidentes=n(),.groups="drop")
anioCTG<-anioCTG%>%
group_by(Año,Tipo.de.circulación,Estado.del.tiempo,Clase.de.accidente)%>%
summarise(Accidentes = min(NumeroAccidentes),.groups = "drop")%>%
arrange(Accidentes)
anioCTG<-anioCTG%>%
rename(Circulacion = Tipo.de.circulación)%>%
rename(Clima = Estado.del.tiempo)%>%
rename(Gravedad = Clase.de.accidente)
anioCTG$Año<-substr(anioCTG$Año, start = 3, stop = nchar(anioCTG$Año))
#elimino el 20 del año para que sea mejor la respresentación textual
#o sea en vez de 2016 sale 16
faceInteractivo <- ggplot(anioCTG, aes(x=Circulacion, y=Accidentes, color=Clima, group=Gravedad)) +
geom_point()+
labs(x="Tipo de circulación",y="Cantidad accidentes",colour=" Estado del clima")+
scale_y_continuous(limits = c(0, 2600), breaks = c(0, 2600))+
theme(axis.text.x = element_text(angle = -45, hjust = 0),axis.text.y = element_text(angle=12))+
facet_grid(Año ~ ., scale = "free_x",space = "free")
ggplotly(faceInteractivo)
# Calcular la cantidad de accidentes por año
frecuencia_año <- table(data$Año)
# Crear un frame de datos con la frecienca y el año
datos_frecuencia_año <- data.frame(
Año = names(frecuencia_año),
Accidentes = as.numeric(frecuencia_año)
)
# Crear el grafico con un punto por cada año
puntos_año <- ggplot(datos_frecuencia_año, aes(x = Año, y = Accidentes, color = Año)) +
geom_point(size = 5) +
scale_x_discrete(breaks = NULL) +
labs(y = "# de accidentes",
title = "Cantidad de accidentes por año") +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank())
ggplotly(puntos_año)
# Calcular la cantidad de accidentes por rango horario de 6 horas
frecuencia_hora_recodificada <- table(data$Hora.recodificada)
# Crear un frame de datos con la frecuencia y el rango horario
datos_frecuencia <- data.frame(
Hora = names(frecuencia_hora_recodificada),
Accidentes = as.numeric(frecuencia_hora_recodificada)
)
barras_hora <- ggplot(data, aes(x = Hora.recodificada, fill = Hora.recodificada)) +
geom_bar() +
labs(title = "Accidentes por Hora recodificada (rango de 6 horas)",
x = "Hora Recodificada", y = "# de accidentes", fill = "Rango horario") +
theme(axis.text.x = element_blank())
ggplotly(barras_hora)
barras_hora <- ggplot(data, aes(x = Tipo.de.accidente, fill = Clase.de.accidente)) +
geom_bar() +
labs(title = "Accidentes por Hora recodificada (rango de 6 horas)",
x = "Hora Recodificada", y = "# de accidentes", fill = "Rango horario") +
theme(axis.text.x = element_blank())
ggplotly(barras_hora)
barras_hora <- ggplot(data, aes(x = Tipo.de.accidente, fill = Clase.de.accidente)) +
geom_bar() +
labs(title = "Tipos de heridos por tipo de accidente",
x = "Tipo de accidente", y = "# de accidentes", fill = "Tipo de heridos")
ggplotly(barras_hora)
barras_hora <- ggplot(data, aes(x = Hora.recodificada, fill = Hora.recodificada)) +
geom_bar() +
labs(title = "Accidentes por Hora recodificada (rango de 6 horas)",
x = "Hora Recodificada", y = "# de accidentes", fill = "Rango horario") +
theme(axis.text.x = element_blank())
ggplotly(barras_hora)
barras_hora <- ggplot(data, aes(x = Hora.recodificada, fill = Hora.recodificada)) +
geom_bar() +
labs(title = "Accidentes por Hora recodificada (rango de 6 horas)",
x = "Hora Recodificada", y = "# de accidentes", fill = "Rango horario") +
theme(axis.text.x = element_blank())
ggplotly(barras_hora)
barras_tipo_calse <- ggplot(data, aes(x = Tipo.de.accidente, fill = Clase.de.accidente)) +
geom_bar() +
labs(title = "Tipos de heridos por tipo de accidente",
x = "Tipo de accidente", y = "# de accidentes", fill = "Tipo de heridos")
ggplotly(barras_tipo_calse)
barras_tipo_clase <- ggplot(data, aes(x = Tipo.de.accidente, fill = Clase.de.accidente)) +
geom_bar() +
labs(title = "Tipos de heridos por tipo de accidente",
x = "Tipo de accidente", y = "# de accidentes", fill = "Tipo de heridos") +
theme(axis.text.x = element_text(angle = 315, hjust = 0))
ggplotly(barras_tipo_clase)
barras_tipo_clase <- ggplot(data, aes(x = Tipo.de.accidente, fill = Clase.de.accidente)) +
geom_bar() +
labs(title = "Tipos de heridos por tipo de accidente",
x = "Tipo de accidente", y = "# de accidentes", fill = "Tipo de heridos") +
theme(axis.text.x = element_text(angle = 315, hjust = 0))
ggplotly(barras_tipo_clase)
barras_tipo_clase <- ggplot(data, aes(x = Tipo.de.accidente, fill = Clase.de.accidente)) +
geom_bar() +
labs(title = "Tipos de heridos por tipo de accidente",
x = "Tipo de accidente", y = "# de accidentes", fill = "Tipo de heridos") +
theme(axis.text.x = element_text(angle = 315, hjust = 0))
data <- read.csv("accidentes_transito_con_victimas_2016_2022.csv", sep = ";")
library(dplyr)
library(ggplot2)
library(plotly)
library(colorspace)
library(treemapify)
#obtenemos los meses, dias y la ruta donde
#mas accidentes hay
meses_dias_RU_mas_accidentes <- data %>%
filter(grepl("^[A-L]\\..*\\s(Enero|Febrero|Marzo|Abril|Mayo|Junio|Julio|Agosto|Setiembre|Octubre|Noviembre|Diciembre)$", Mes)) %>%
filter(grepl("^[1-7]\\.(Domingo|Lunes|Martes|Miércoles|Jueves|Viernes|Sábado)$", Día)) %>%
group_by(Mes,Día,Ruta) %>%
summarise(MDtotal_accidentes = n()) %>%
arrange(desc(MDtotal_accidentes))
registros_mas_frecuentes <- meses_dias_RU_mas_accidentes %>%
group_by(Mes) %>%
slice(1)
numero_mes <- seq(1, 12, length.out = nrow(registros_mas_frecuentes))
numero_mes <- as.integer(numero_mes)
registros_mas_frecuentes <- cbind(registros_mas_frecuentes, NumeroMes = numero_mes)
# Crear una columna para el número de día según el día de la semana en registros_mas_frecuentes
registros_mas_frecuentes$ColorDia <-ifelse(registros_mas_frecuentes$Día == "1.Domingo", "blue",
ifelse(registros_mas_frecuentes$Día == "2.Lunes", "red",
ifelse(registros_mas_frecuentes$Día == "3.Martes", "yellow",
ifelse(registros_mas_frecuentes$Día == "4.Miércoles", "cyan",
ifelse(registros_mas_frecuentes$Día == "5.Jueves", "darkgreen",
ifelse(registros_mas_frecuentes$Día == "6.Viernes", "brown",
ifelse(registros_mas_frecuentes$Día == "7.Sábado", "black", NA)))))))
registros_mas_frecuentes$idRuta <-ifelse(registros_mas_frecuentes$Ruta == "Cantonal", 1)
registros_mas_frecuentes$Mes <- gsub("[A-L]\\.", "", registros_mas_frecuentes$Mes)
registros_mas_frecuentes$Día <- gsub("[1-7]\\.", "", registros_mas_frecuentes$Día)
grafico_chernoff <- ggplot(registros_mas_frecuentes, aes(x = NumeroMes, y = idRuta,label1 = Mes,label2 = Ruta,label3 = Día)) +
geom_point(size = 9,colour = registros_mas_frecuentes$ColorDia) +
labs(x = "Mes",y = "Ruta") +
geom_text(aes(label = "👁️ 👁️"),vjust = -5, size = 3)+
geom_text(aes(label = "👄"), vjust = 5, size = 2) +
theme_bw()
# Convertimos el gráfico ggplot2 en uno interactivo con plotly
grafico_interactivo <- ggplotly(grafico_chernoff,tooltip = c("label1", "label2", "label3"))
# Mostramos el gráfico interactivo
grafico_interactivo
# 12 caras por los meses, color cara dias ... y tamanho cara ruta
ruralUrbano_mas_accidentes<-data %>%
group_by(Rural.o.urbano)%>%
summarise(RUtotal_accidentes = n()) %>%
arrange(desc(RUtotal_accidentes))
# desde 2016 hastas 2022
labels = ruralUrbano_mas_accidentes$Rural.o.urbano
values = ruralUrbano_mas_accidentes$RUtotal_accidentes
fig <- plot_ly(type='pie', labels=labels, values=values,
textinfo='label+percent',
insidetextorientation='radial')
fig <- fig %>% layout(title = 'Accidentes por ruta entre 2016-2022')
fig
#y =mideplan x= canton
#tener canton con mas y menos accidentes
region_canton_mas_accidentes<-data%>%
group_by(Región.Mideplan, Cantón)%>%
summarise(RCtotal_accidentes = n(),.groups = "drop")
region_canton_mas_accidentes<-region_canton_mas_accidentes%>%
group_by(Región.Mideplan, Cantón)%>%
summarise(max_valor = max(RCtotal_accidentes),.groups = "drop")%>%
arrange(max_valor)
# Número de colores deseado
n_colores <- 176
# Generar la paleta de colores
paleta_colores <-rainbow_hcl(n_colores) # Ejemplo de colores base
fig <- plot_ly(region_canton_mas_accidentes, x = ~Región.Mideplan, y = ~max_valor, marker = list(color=paleta_colores) , type = 'bar',hovertemplate = ~paste("Región: ", Región.Mideplan, "<br>Cantón: ", Cantón, "<br>Valor: ", max_valor,
"<extra></extra>"))
fig <- fig %>% layout(yaxis = list(title = ''),xaxis=list(title = ''), barmode = 'stack')
fig
anioCTG<-data %>%
group_by(Año,Tipo.de.circulación,Estado.del.tiempo,Clase.de.accidente) %>%
summarise(NumeroAccidentes=n(),.groups="drop")
anioCTG<-anioCTG%>%
group_by(Año,Tipo.de.circulación,Estado.del.tiempo,Clase.de.accidente)%>%
summarise(Accidentes = min(NumeroAccidentes),.groups = "drop")%>%
arrange(Accidentes)
anioCTG<-anioCTG%>%
rename(Circulacion = Tipo.de.circulación)%>%
rename(Clima = Estado.del.tiempo)%>%
rename(Gravedad = Clase.de.accidente)
anioCTG$Año<-substr(anioCTG$Año, start = 3, stop = nchar(anioCTG$Año))
#elimino el 20 del año para que sea mejor la respresentación textual
#o sea en vez de 2016 sale 16
faceInteractivo <- ggplot(anioCTG, aes(x=Circulacion, y=Accidentes, color=Clima, group=Gravedad)) +
geom_point()+
labs(x="Tipo de circulación",y="Cantidad accidentes",colour=" Estado del clima")+
scale_y_continuous(limits = c(0, 2600), breaks = c(0, 2600))+
theme(axis.text.x = element_text(angle = -45, hjust = 0),axis.text.y = element_text(angle=12))+
facet_grid(Año ~ ., scale = "free_x",space = "free")
ggplotly(faceInteractivo)
# Calcular la cantidad de accidentes por año
frecuencia_año <- table(data$Año)
# Crear un frame de datos con la frecienca y el año
datos_frecuencia_año <- data.frame(
Año = names(frecuencia_año),
Accidentes = as.numeric(frecuencia_año)
)
# Crear el grafico con un punto por cada año
puntos_año <- ggplot(datos_frecuencia_año, aes(x = Año, y = Accidentes, color = Año)) +
geom_point(size = 5) +
scale_x_discrete(breaks = NULL) +
labs(y = "# de accidentes",
title = "Cantidad de accidentes por año") +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank())
ggplotly(puntos_año)
barras_hora <- ggplot(data, aes(x = Hora.recodificada, fill = Hora.recodificada)) +
geom_bar() +
labs(title = "Accidentes por Hora recodificada (rango de 6 horas)",
x = "Hora Recodificada", y = "# de accidentes", fill = "Rango horario") +
theme(axis.text.x = element_blank())
ggplotly(barras_hora)
barras_tipo_clase <- ggplot(data, aes(x = Tipo.de.accidente, fill = Clase.de.accidente)) +
geom_bar() +
labs(title = "Tipos de heridos por tipo de accidente",
x = "Tipo de accidente", y = "# de accidentes", fill = "Tipo de heridos") +
theme(axis.text.x = element_text(angle = 315, hjust = 0))
ggplotly(barras_tipo_clase)
